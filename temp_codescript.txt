src/index.html:

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">

    <title>Priorities Online</title>
</head>

<body>

    <header id="title">
        <!-- Burger Menu Button -->
        <button id="toggleSidebar" class="hamburger-menu">
            &#9776;
        </button>
        <h1 id="app-title" style="font-family: monospace; display: inline;">Priorities Online</h1>
    </header>

    <div id="app">
        <aside>
            <!-- Sidebar -->
            <ul>
                <li id="menuTasks">Tasks</li>
                <li>
                    <span id="togglePriorities">Priorities</span>
                    <ul class="sub-menu">
                        <li id="high">High</li>
                        <li id="medium">Medium</li>
                        <li id="low">Low</li>
                    </ul>
                </li>
                <li id="menuProjects">Projects</li>
                <li id="menuDates">Dates</li>
            </ul>
        </aside>
        <main>
            <!-- Main Content -->
            <button id="addTaskButton">Add task</button>
            <div id="tasks"></div>
            <div id="projectsContainer">
                <button id="createProjectButton">Create Project</button>
                <div id="projectInputContainer" style="display: none;">
                    <h2 id="projectTitle"></h2>
                    <button id="addTaskButtonProject">Add Task</button>
                </div>
                <div id="projectsList"></div>
            </div>
            <div id="calendarContainer"></div>
        </main>
    </div>

<footer>
    <p>
        <a href="https://github.com/alexaldearroyo" target="_blank">
            <i class="fab fa-github github-icon"></i> <!-- Icono de GitHub a la izquierda -->
            
        </a>
        &copy; Alex Arroyo 2023
    </p>
</footer>

    
    

</body>

</html>
----------------------------------------

src/js/main.js:

// Import the main SASS styles
import "../sass/main.sass";

// Import functions and constants from modularized files
import {
  loadTasksFromLocalStorage,
} from "./localStorageManager.js";

import {
  handleAddTaskClick,
  handleTaskCompletion,
  displayAllTasks,
  filterTasksByPriority,
} from "./taskManager.js";

import {
  displayProject, // QUIZÁS EN UN FUTURO
  setupCreateProjectButton,
  loadProjects,
} from "./projectManager";

import { displayCalendarWithTasks } from "./calendarManager.js";

document.addEventListener("DOMContentLoaded", () => {
  setupTaskEnvironment();
  setupPrioritiesSubMenu();
  setupProjectEnvironment();
  setupProjectsLabel();
  setupDatesLabel();
  setupSidebarItems();
  setupSidebarToggle();
  displayAllTasks();
});

function setupTaskEnvironment() {
  const addTaskButton = document.getElementById("addTaskButton");
  const tasksContainer = document.getElementById("tasks");

  addTaskButton.style.display = "none";
  addTaskButton.addEventListener("click", handleAddTaskClick);
  tasksContainer.addEventListener("click", handleTaskCompletion);
}

function setupPrioritiesSubMenu() {
  const prioritiesToggle = document.getElementById("togglePriorities");
  const subMenu = document.querySelector(".sub-menu");
  const parentLi = prioritiesToggle.parentElement;
  const tasksLabel = document.querySelector("aside ul li:first-child");

  tasksLabel.addEventListener("click", displayAllTasks);

  prioritiesToggle.addEventListener("click", () => {
    const isSubMenuVisible = subMenu.style.display === "block";
    subMenu.style.display = isSubMenuVisible ? "none" : "block";
    parentLi.classList.toggle("sub-menu-opened", !isSubMenuVisible);
  });

  subMenu.addEventListener("click", (event) => {
    if (event.target.tagName === "LI") {
      const selectedPriority = event.target.textContent;
      filterTasksByPriority(selectedPriority);
      const tasksContainer = document.getElementById("tasks");
      tasksContainer.style.display = "block";
      const projectsContainer = document.getElementById("projectsContainer");
      const calendarContainer = document.getElementById("calendarContainer");
      projectsContainer.style.display = "none";
      calendarContainer.innerHTML = "";
    }
  });
}

function setupProjectEnvironment() {
  const createProjectButton = document.getElementById("createProjectButton");
  const projectsContainer = document.getElementById("projectsContainer");
  createProjectButton.style.display = "none";
  setupCreateProjectButton(createProjectButton, projectsContainer);
}

function setupProjectsLabel() {
  const projectsLabel = document.querySelector("#menuProjects");
  let projectsAreShown = false;
  const projectsContainer = document.getElementById("projectsContainer");
  projectsContainer.classList.add("project-container");
  projectsLabel.addEventListener("click", () => {
    if (!projectsAreShown) {
      const addTaskButton = document.getElementById("addTaskButton");
      if (addTaskButton) {
        addTaskButton.style.display = "none";
      }

      projectsContainer.style.display = "block";
      loadProjects(projectsContainer);

      const tasksContainer = document.getElementById("tasks");
      tasksContainer.style.display = "none";
      projectsAreShown = true;
    }
  });
}

function setupDatesLabel() {
  const datesLabel = document.querySelector("aside ul li:nth-child(4)");
  datesLabel.addEventListener("click", () => {
    const allTasks = loadTasksFromLocalStorage();
    const tasksContainer = document.getElementById("tasks");
    const calendarContainer = document.getElementById("calendarContainer");
    displayCalendarWithTasks(tasksContainer, calendarContainer, allTasks);
  });
}

function setupSidebarItems() {
  const sidebarItems = document.querySelectorAll("aside ul li");
  const createProjectButton = document.getElementById("createProjectButton");
  const projectsContainer = document.getElementById("projectsContainer");
  sidebarItems.forEach((item) => {
    item.addEventListener("click", (event) => {
      const calendarContainer = document.getElementById("calendarContainer");

      switch (event.target.textContent) {
        case "Projects":
          createProjectButton.style.display = "block";
          projectsContainer.style.display = "block";
          calendarContainer.innerHTML = ""; // Clear the calendar container
          break;
        case "Dates":
          createProjectButton.style.display = "none";
          projectsContainer.style.display = "none";

          const allTasks = loadTasksFromLocalStorage();
          const tasksContainer = document.getElementById("tasks");
          displayCalendarWithTasks(tasksContainer, calendarContainer, allTasks);
          break;
        default:
          createProjectButton.style.display = "none";
          projectsContainer.style.display = "none";
          calendarContainer.innerHTML = ""; // Clear the calendar container
          break;
      }
    });
  });
}

function setupSidebarToggle() {
  const toggleSidebarButton = document.getElementById("toggleSidebar");
  const sidebar = document.querySelector("aside");
  toggleSidebarButton.addEventListener("click", () => {
    sidebar.classList.toggle("hidden");
  });
}

----------------------------------------

src/js/calendarManager.js:

import { createTaskElement } from './taskManager.js';

function getFirstDayOfMonth(year, month) {
    let day = new Date(year, month, 1).getDay();
    return day === 0 ? 6 : day - 1; // 0 para lunes, 6 para domingo
}

function getLastDayOfMonth(year, month) {
    let day = new Date(year, month + 1, 0).getDay();
    return day === 0 ? 6 : day - 1; // 0 para lunes, 6 para domingo
}

function generateCalendarDays(year, month) {
    const firstDay = getFirstDayOfMonth(year, month);
    const daysInMonth = new Date(year, month + 1, 0).getDate();
    const daysArray = [];

    // Días del mes anterior
    for (let i = 0; i < firstDay; i++) {
        const day = new Date(year, month, i - firstDay + 1).getDate();
        daysArray.push({ day, outOfCurrentMonth: true });
    }

    // Días del mes actual
    for (let i = 1; i <= daysInMonth; i++) {
        daysArray.push({ day: i });
    }

    // Días del próximo mes
    const lastDay = getLastDayOfMonth(year, month);
    for (let i = lastDay + 1; i < 7; i++) {
        const day = new Date(year, month + 1, i - lastDay).getDate();
        daysArray.push({ day, outOfCurrentMonth: true });
    }

    return daysArray;
}

// Function to create the calendar header
function createCalendarHeader(currentDate, calendarContainer, tasksContainer, allTasks) {
    const header = document.createElement('div');
    header.classList.add('calendar-header');

    const prevButton = document.createElement('button');
    prevButton.innerHTML = "&lt;";
    prevButton.addEventListener('click', () => {
        currentDate.setMonth(currentDate.getMonth() - 1);
        displayCalendarWithTasks(tasksContainer, calendarContainer, allTasks, currentDate);
    });

    const nextButton = document.createElement('button');
    nextButton.innerHTML = "&gt;";
    nextButton.addEventListener('click', () => {
        currentDate.setMonth(currentDate.getMonth() + 1);
        displayCalendarWithTasks(tasksContainer, calendarContainer, allTasks, currentDate);
    });

    const monthYearLabel = document.createElement('span');
    monthYearLabel.textContent = `${currentDate.toLocaleString('en-US', { month: 'long' })} ${currentDate.getFullYear()}`;

    header.appendChild(prevButton);
    header.appendChild(monthYearLabel);
    header.appendChild(nextButton);

    return header;
}

// Esta función mostrará un modal con las tareas para una fecha específica
function showModalWithTasks(tasks) {
    // Crear contenedor del modal
    const modal = document.createElement('div');
    modal.classList.add('tasks-modal', 'tasks-modal-container');  // Modificación aquí

    // Contenedor para las tareas
    const tasksList = document.createElement('div');
    modal.appendChild(tasksList);

    // Para cada tarea, crea un elemento y agrégalo a la lista
    tasks.forEach(task => {
        const taskElement = createTaskElement(task); // Utilizando la función de taskManager.js
        tasksList.appendChild(taskElement);
    });

    // Agrega una opción para cerrar el modal
    const closeButton = document.createElement('button');
    closeButton.classList.add('close-modal-button');
    closeButton.textContent = "Close";
    closeButton.addEventListener('click', () => {
        modal.remove();
    });
    modal.appendChild(closeButton);

    document.body.appendChild(modal);
}

function createWeekdaysHeader() {
    const days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];
    const header = document.createElement('div');
    header.classList.add('weekdays-header');
    days.forEach(day => {
        const dayElement = document.createElement('div');
        dayElement.textContent = day;
        header.appendChild(dayElement);
    });
    return header;
}


// Function to create a basic calendar view and highlight dates with tasks
export function displayCalendarWithTasks(tasksContainer, calendarContainer, allTasks, displayDate = new Date()) {
    tasksContainer.innerHTML = ''; // Clear the current tasks
    calendarContainer.innerHTML = ''; // Clear the current calendar

    const currentMonth = displayDate.getMonth();
    const currentYear = displayDate.getFullYear();

    calendarContainer.appendChild(createCalendarHeader(displayDate, calendarContainer, tasksContainer, allTasks));

    calendarContainer.appendChild(createWeekdaysHeader());

    const calendarDays = generateCalendarDays(currentYear, currentMonth);
    const calendarDatesContainer = document.createElement('div');
    calendarDatesContainer.classList.add('calendar-dates-container');

    calendarDays.forEach(({ day, outOfCurrentMonth }) => {
        const dateElement = document.createElement("div");
        dateElement.classList.add("calendar-day");
        if (outOfCurrentMonth) {
            dateElement.classList.add("out-of-month");
        }
        dateElement.textContent = day;

        if (!outOfCurrentMonth) { // Sólo verificar tareas si el día es del mes actual
            const tasksForThisDay = allTasks.filter(task => {
                const taskDate = new Date(task.date);
                return taskDate.getDate() === day && taskDate.getMonth() === currentMonth && taskDate.getFullYear() === currentYear;
            });

            if (tasksForThisDay.length > 0) {
                dateElement.classList.add("has-tasks");
                dateElement.addEventListener('click', () => {
                    showModalWithTasks(tasksForThisDay);
                });
            }
        }

        calendarDatesContainer.appendChild(dateElement);
    });

    calendarContainer.appendChild(calendarDatesContainer);

    const addTaskButton = document.getElementById("addTaskButton");
    addTaskButton.style.display = 'none'; // Hide the "Add task" button
}

----------------------------------------

src/js/localStorageManager.js:

const TASK_STORAGE_KEY = "tasks";

/**
 * Save tasks to LocalStorage.
 * @param {Array} tasks - The tasks to save.
 */
export function saveTasksToLocalStorage(tasks) {
  localStorage.setItem(TASK_STORAGE_KEY, JSON.stringify(tasks));
}

/**
 * Load tasks from LocalStorage.
 * @returns {Array} The tasks loaded from LocalStorage.
 */
export function loadTasksFromLocalStorage() {
  const storedTasks = localStorage.getItem(TASK_STORAGE_KEY);
  return storedTasks ? JSON.parse(storedTasks).filter(task => task.timestamp) : [];
}

/**
 * Remove a task from LocalStorage based on its timestamp.
 * @param {number} taskTimestamp - The timestamp of the task to remove.
 */
export function removeTaskFromLocalStorage(taskTimestamp) {
  const tasks = loadTasksFromLocalStorage().filter(task => task.timestamp && task.timestamp.toString() !== taskTimestamp);
  saveTasksToLocalStorage(tasks);
}


const PROJECT_STORAGE_KEY = "projects";

/**
 * Save projects to LocalStorage.
 * @param {Array} projects - The projects to save.
 */
export function saveProjectsToLocalStorage(projects) {
  localStorage.setItem(PROJECT_STORAGE_KEY, JSON.stringify(projects));
}

/**
 * Load projects from LocalStorage.
 * @returns {Array} The projects loaded from LocalStorage.
 */
export function loadProjectsFromLocalStorage() {
  const storedProjects = localStorage.getItem(PROJECT_STORAGE_KEY);
  return storedProjects ? JSON.parse(storedProjects) : [];
}

/**
 * Add a new project to LocalStorage.
 * @param {string} projectName - The name of the new project.
 */
export function addProjectToLocalStorage(projectName) {
  const projects = loadProjectsFromLocalStorage();
  projects.push(projectName);
  saveProjectsToLocalStorage(projects);
}

export function removeProjectFromLocalStorage(projectName) {

  const projects = loadProjectsFromLocalStorage();
  const index = projects.indexOf(projectName);
  if (index > -1) {
    projects.splice(index, 1);
    saveProjectsToLocalStorage(projects);
}
}
----------------------------------------

