src/js/main.js:

// Import the main SASS styles
import "../sass/main.sass";

// Import functions and constants from modularized files
import {
  saveTasksToLocalStorage,
  loadTasksFromLocalStorage,
} from "./localStorageManager.js";

import {
  handleAddTaskClick,
  handleTaskCompletion,
  createTaskElement,
  removeTask,
  displayAllTasks,
  filterTasksByPriority,
} from "./taskManager.js";

import {
  displayProject,
  setupCreateProjectButton,
  loadAndDisplaySavedProjects,
} from "./projectManager";

import { displayCalendarWithTasks } from "./calendarManager.js";


document.addEventListener("DOMContentLoaded", () => {
  setupProjectEnvironment();
  setupTaskEnvironment();
  setupPrioritiesSubMenu();
  setupProjectsLabel();
  setupDatesLabel();
  setupSidebarItems();
  setupSidebarToggle();
  displayAllTasks();
});

function setupProjectEnvironment() {
  const createProjectButton = document.getElementById("createProjectButton");
  const projectsContainer = document.getElementById("projectsContainer");
  createProjectButton.style.display = "none";
  setupCreateProjectButton(createProjectButton, projectsContainer);
}

function setupTaskEnvironment() {
  const addTaskButton = document.getElementById("addTaskButton");
  const tasksContainer = document.getElementById("tasks");

  // Hide the "Create Project" button initially
  addTaskButton.style.display = "none";

  // Add event listener to detect when a task is marked as complete
  tasksContainer.addEventListener("click", handleTaskCompletion);

  // Add event listener for the "Add Task" button
  addTaskButton.addEventListener("click", handleAddTaskClick);
}

function setupPrioritiesSubMenu() {
  const prioritiesToggle = document.getElementById("togglePriorities");
  const subMenu = document.querySelector(".sub-menu");
  const parentLi = prioritiesToggle.parentElement;
  const tasksLabel = document.querySelector("aside ul li:first-child");

  tasksLabel.addEventListener("click", displayAllTasks);

  prioritiesToggle.addEventListener("click", () => {
    const isSubMenuVisible = subMenu.style.display === "block";
    subMenu.style.display = isSubMenuVisible ? "none" : "block";
    parentLi.classList.toggle("sub-menu-opened", !isSubMenuVisible);
  });

  subMenu.addEventListener("click", (event) => {
    if (event.target.tagName === "LI") {
      const selectedPriority = event.target.textContent;
      filterTasksByPriority(selectedPriority);
      const tasksContainer = document.getElementById("tasks");
      tasksContainer.style.display = "block";
      const projectsContainer = document.getElementById("projectsContainer");
      const calendarContainer = document.getElementById("calendarContainer");
      projectsContainer.style.display = "none";
      calendarContainer.innerHTML = "";
    }
  });
}

function setupProjectsLabel() {
  const projectsLabel = document.querySelector("#menuProjects");
  let projectsAreShown = false;
  const projectsContainer = document.getElementById("projectsContainer");
  projectsContainer.classList.add("project-container");
  projectsLabel.addEventListener("click", () => {
    if (!projectsAreShown) {
      const addTaskButton = document.getElementById("addTaskButton");
      if (addTaskButton) {
        addTaskButton.style.display = "none";
      }

      projectsContainer.style.display = "block";
      loadAndDisplaySavedProjects(projectsContainer);

      const tasksContainer = document.getElementById("tasks");
      tasksContainer.style.display = "none";
      projectsAreShown = true;
    }
  });
}

function setupDatesLabel() {
  const datesLabel = document.querySelector("aside ul li:nth-child(4)");
  datesLabel.addEventListener("click", () => {
    const allTasks = loadTasksFromLocalStorage();
    const tasksContainer = document.getElementById("tasks");
    const calendarContainer = document.getElementById("calendarContainer");
    displayCalendarWithTasks(tasksContainer, calendarContainer, allTasks);
  });
}

function setupSidebarItems() {
  const sidebarItems = document.querySelectorAll("aside ul li");
  const createProjectButton = document.getElementById("createProjectButton");
  const projectsContainer = document.getElementById("projectsContainer");
  sidebarItems.forEach((item) => {
    item.addEventListener("click", (event) => {
      const calendarContainer = document.getElementById("calendarContainer");

      switch (event.target.textContent) {
        case "Projects":
          createProjectButton.style.display = "block";
          projectsContainer.style.display = "block";
          calendarContainer.innerHTML = ""; // Clear the calendar container
          break;
        case "Dates":
          createProjectButton.style.display = "none";
          projectsContainer.style.display = "none";

          const allTasks = loadTasksFromLocalStorage();
          const tasksContainer = document.getElementById("tasks");
          displayCalendarWithTasks(tasksContainer, calendarContainer, allTasks);
          break;
        default:
          createProjectButton.style.display = "none";
          projectsContainer.style.display = "none";
          calendarContainer.innerHTML = ""; // Clear the calendar container
          break;
      }
    });
  });
}

function setupSidebarToggle() {
  const toggleSidebarButton = document.getElementById("toggleSidebar");
  const sidebar = document.querySelector("aside");
  toggleSidebarButton.addEventListener("click", () => {
    sidebar.classList.toggle("hidden");
  });
}

----------------------------------------

src/js/taskManager.js:

import {
  saveTasksToLocalStorage,
  loadTasksFromLocalStorage,
} from "./localStorageManager.js";
import {
  TASK_INPUT_PLACEHOLDER,
  PRIORITY_LABEL,
  DATE_LABEL,
  ADD_BUTTON_TEXT,
  CANCEL_BUTTON_TEXT,
  PRIORITIES,
} from "./constants.js";

export function displayAllTasks() {
  const addTaskButton = document.getElementById("addTaskButton");
  addTaskButton.style.display = "flex"; // Shows "add task" button
  const allTasks = loadTasksFromLocalStorage();
  const tasksContainer = document.getElementById("tasks");
  tasksContainer.innerHTML = ""; // Clear the current tasks
  for (const taskData of allTasks) {
    tasksContainer.appendChild(createTaskElement(taskData));
  }
  tasksContainer.style.display = "block";
}

/**
 * Filter tasks by their priority.
 * @param {string} priority - The selected priority.
 */
export function filterTasksByPriority(priority) {
  const allTasks = loadTasksFromLocalStorage();
  const filteredTasks = allTasks.filter((task) => task.priority === priority);
  const tasksContainer = document.getElementById("tasks");
  tasksContainer.innerHTML = ""; // Clear the current tasks
  for (const taskData of filteredTasks) {
    tasksContainer.appendChild(createTaskElement(taskData));
  }
  const addTaskButton = document.getElementById("addTaskButton");
  addTaskButton.style.display = "none"; // Hide the "Add task" button
}

export function handleAddTaskClick() {
  const addTaskButton = document.getElementById("addTaskButton");
  const createProjectButton = document.getElementById("createProjectButton");

  createProjectButton.style.display = "none";

  const tasksContainer = document.getElementById("tasks");

  addTaskButton.disabled = true;

  // Create new task input form elements
  const taskElement = document.createElement("div");
  taskElement.classList.add("new-task");

  // Text input
  const textInput = document.createElement("input");
  textInput.type = "text";
  textInput.placeholder = TASK_INPUT_PLACEHOLDER;
  textInput.classList.add("task-input");

  const actionContainer = document.createElement("div");
  actionContainer.classList.add("action-container");

  // Priority select
  const priorityContainer = document.createElement("div");
  priorityContainer.classList.add("custom-container", "priority-container");
  const priorityLabel = document.createElement("label");
  priorityLabel.textContent = PRIORITY_LABEL;
  const prioritySelect = document.createElement("select");
  PRIORITIES.forEach((priority) => {
    const option = document.createElement("option");
    option.value = priority;
    option.textContent = priority;
    prioritySelect.appendChild(option);
  });
  priorityContainer.appendChild(priorityLabel);
  priorityContainer.appendChild(prioritySelect);

  // Date input
  const dateContainer = document.createElement("div");
  dateContainer.classList.add("custom-container", "date-container");
  const dateLabel = document.createElement("label");
  dateLabel.textContent = DATE_LABEL;
  const dateInput = document.createElement("input");
  dateInput.type = "date";
  dateContainer.appendChild(dateLabel);
  dateContainer.appendChild(dateInput);

  // Buttons
  const buttonsContainer = document.createElement("div");
  buttonsContainer.classList.add("buttons-container");

  const addButton = document.createElement("button");
  addButton.textContent = ADD_BUTTON_TEXT;
  buttonsContainer.appendChild(addButton);

  const cancelButton = document.createElement("button");
  cancelButton.textContent = CANCEL_BUTTON_TEXT;
  buttonsContainer.appendChild(cancelButton);

  // Add the input elements to the task element
  const inputGroup = document.createElement("div");
  inputGroup.classList.add("input-group");
  inputGroup.appendChild(textInput);
  taskElement.appendChild(inputGroup);

  actionContainer.appendChild(priorityContainer);
  actionContainer.appendChild(dateContainer);
  actionContainer.appendChild(buttonsContainer);

  taskElement.appendChild(actionContainer);

  // Event listeners for adding and cancelling the creation of new tasks
  addButton.addEventListener("click", () => {
    if (textInput.value) {
      const taskTimestamp = Date.now();
      const taskData = {
        timestamp: taskTimestamp,
        text: textInput.value,
        priority: prioritySelect.value,
        date: dateInput.value,
      };
      tasksContainer.appendChild(createTaskElement(taskData));

      // Add task data to local storage
      const tasks = loadTasksFromLocalStorage();
      tasks.push(taskData);
      saveTasksToLocalStorage(tasks);

      taskElement.remove();
      addTaskButton.disabled = false;
    }
  });

  // Handle task cancellation
  cancelButton.addEventListener("click", () => {
    taskElement.remove();
    addTaskButton.disabled = false;
  });

  // Append new task element to tasks container
  tasksContainer.prepend(taskElement);
}

export function handleTaskCompletion(event) {
  if (event.target.classList.contains("complete-button")) {
    removeTask(event.target);
  }
}

/**
 * Create a DOM element for a task.
 * @param {Object} taskData - The data for the task.
 * @returns {HTMLElement} The task element.
 */
export function createTaskElement(taskData) {
  const task = document.createElement("div");
  task.classList.add("task");
  task.dataset.timestamp = taskData.timestamp;

  const taskText = document.createElement("div");
  taskText.classList.add("task-text");
  taskText.textContent = taskData.text;
  task.appendChild(taskText);

  const taskDetails = document.createElement("div");
  taskDetails.classList.add("task-details");

  const priorityContainer = document.createElement("div");
  priorityContainer.classList.add("custom-container", "priority-container");
  const prioritySpan = document.createElement("span");
  prioritySpan.textContent = taskData.priority;
  priorityContainer.appendChild(prioritySpan);

  if (taskData.date && taskData.date.trim() !== "") {
    // Comprobar si hay fecha y no está vacía
    const dateContainer = document.createElement("div");
    dateContainer.classList.add("custom-container", "date-container");
    const dateSpan = document.createElement("span");
    dateSpan.textContent = taskData.date;
    dateContainer.appendChild(dateSpan);
    taskDetails.appendChild(dateContainer);
  }

  const completeButton = document.createElement("button");
  completeButton.classList.add("complete-button");
  completeButton.textContent = "Complete";
  completeButton.addEventListener("click", function () {
    removeTask(this);
  });

  taskDetails.appendChild(priorityContainer);
  taskDetails.appendChild(completeButton);

  task.appendChild(taskDetails);

  return task;
}

/**
 * Remove a task element from the DOM and update localStorage.
 * @param {HTMLElement} buttonElement - The button element that triggered the removal.
 */
export function removeTask(buttonElement) {
  const taskElement = buttonElement.parentElement.parentElement;
  const taskTimestamp = taskElement.dataset.timestamp;

  taskElement.remove();

  const tasks = loadTasksFromLocalStorage().filter(
    (task) => task.timestamp && task.timestamp.toString() !== taskTimestamp
  );
  saveTasksToLocalStorage(tasks);
}

----------------------------------------

src/js/calendarManager.js:

import { createTaskElement } from './taskManager.js';

function getFirstDayOfMonth(year, month) {
    let day = new Date(year, month, 1).getDay();
    return day === 0 ? 6 : day - 1; // 0 para lunes, 6 para domingo
}

function getLastDayOfMonth(year, month) {
    let day = new Date(year, month + 1, 0).getDay();
    return day === 0 ? 6 : day - 1; // 0 para lunes, 6 para domingo
}

function generateCalendarDays(year, month) {
    const firstDay = getFirstDayOfMonth(year, month);
    const daysInMonth = new Date(year, month + 1, 0).getDate();
    const daysArray = [];

    // Días del mes anterior
    for (let i = 0; i < firstDay; i++) {
        const day = new Date(year, month, i - firstDay + 1).getDate();
        daysArray.push({ day, outOfCurrentMonth: true });
    }

    // Días del mes actual
    for (let i = 1; i <= daysInMonth; i++) {
        daysArray.push({ day: i });
    }

    // Días del próximo mes
    const lastDay = getLastDayOfMonth(year, month);
    for (let i = lastDay + 1; i < 7; i++) {
        const day = new Date(year, month + 1, i - lastDay).getDate();
        daysArray.push({ day, outOfCurrentMonth: true });
    }

    return daysArray;
}

// Function to create the calendar header
function createCalendarHeader(currentDate, calendarContainer, tasksContainer, allTasks) {
    const header = document.createElement('div');
    header.classList.add('calendar-header');

    const prevButton = document.createElement('button');
    prevButton.innerHTML = "&lt;";
    prevButton.addEventListener('click', () => {
        currentDate.setMonth(currentDate.getMonth() - 1);
        displayCalendarWithTasks(tasksContainer, calendarContainer, allTasks, currentDate);
    });

    const nextButton = document.createElement('button');
    nextButton.innerHTML = "&gt;";
    nextButton.addEventListener('click', () => {
        currentDate.setMonth(currentDate.getMonth() + 1);
        displayCalendarWithTasks(tasksContainer, calendarContainer, allTasks, currentDate);
    });

    const monthYearLabel = document.createElement('span');
    monthYearLabel.textContent = `${currentDate.toLocaleString('en-US', { month: 'long' })} ${currentDate.getFullYear()}`;

    header.appendChild(prevButton);
    header.appendChild(monthYearLabel);
    header.appendChild(nextButton);

    return header;
}

// Esta función mostrará un modal con las tareas para una fecha específica
function showModalWithTasks(tasks) {
    // Crear contenedor del modal
    const modal = document.createElement('div');
    modal.classList.add('tasks-modal', 'tasks-modal-container');  // Modificación aquí

    // Contenedor para las tareas
    const tasksList = document.createElement('div');
    modal.appendChild(tasksList);

    // Para cada tarea, crea un elemento y agrégalo a la lista
    tasks.forEach(task => {
        const taskElement = createTaskElement(task); // Utilizando la función de taskManager.js
        tasksList.appendChild(taskElement);
    });

    // Agrega una opción para cerrar el modal
    const closeButton = document.createElement('button');
    closeButton.classList.add('close-modal-button');
    closeButton.textContent = "Close";
    closeButton.addEventListener('click', () => {
        modal.remove();
    });
    modal.appendChild(closeButton);

    document.body.appendChild(modal);
}

function createWeekdaysHeader() {
    const days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];
    const header = document.createElement('div');
    header.classList.add('weekdays-header');
    days.forEach(day => {
        const dayElement = document.createElement('div');
        dayElement.textContent = day;
        header.appendChild(dayElement);
    });
    return header;
}


// Function to create a basic calendar view and highlight dates with tasks
export function displayCalendarWithTasks(tasksContainer, calendarContainer, allTasks, displayDate = new Date()) {
    tasksContainer.innerHTML = ''; // Clear the current tasks
    calendarContainer.innerHTML = ''; // Clear the current calendar

    const currentMonth = displayDate.getMonth();
    const currentYear = displayDate.getFullYear();

    calendarContainer.appendChild(createCalendarHeader(displayDate, calendarContainer, tasksContainer, allTasks));

    calendarContainer.appendChild(createWeekdaysHeader());

    const calendarDays = generateCalendarDays(currentYear, currentMonth);
    const calendarDatesContainer = document.createElement('div');
    calendarDatesContainer.classList.add('calendar-dates-container');

    calendarDays.forEach(({ day, outOfCurrentMonth }) => {
        const dateElement = document.createElement("div");
        dateElement.classList.add("calendar-day");
        if (outOfCurrentMonth) {
            dateElement.classList.add("out-of-month");
        }
        dateElement.textContent = day;

        if (!outOfCurrentMonth) { // Sólo verificar tareas si el día es del mes actual
            const tasksForThisDay = allTasks.filter(task => {
                const taskDate = new Date(task.date);
                return taskDate.getDate() === day && taskDate.getMonth() === currentMonth && taskDate.getFullYear() === currentYear;
            });

            if (tasksForThisDay.length > 0) {
                dateElement.classList.add("has-tasks");
                dateElement.addEventListener('click', () => {
                    showModalWithTasks(tasksForThisDay);
                });
            }
        }

        calendarDatesContainer.appendChild(dateElement);
    });

    calendarContainer.appendChild(calendarDatesContainer);

    const addTaskButton = document.getElementById("addTaskButton");
    addTaskButton.style.display = 'none'; // Hide the "Add task" button
}

----------------------------------------

