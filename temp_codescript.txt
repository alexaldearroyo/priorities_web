src/js/main.js:

// Import the main SASS styles
import "../sass/main.sass";

// Import functions and constants from modularized files
import {
  loadTasksFromLocalStorage,
} from "./localStorageManager.js";

import {
  handleAddTaskClick,
  handleTaskCompletion,
  displayAllTasks,
  filterTasksByPriority,
} from "./taskManager.js";

import {
  displayProject, // QUIZÁS EN UN FUTURO
  setupCreateProjectButton,
  loadProjects,
} from "./projectManager";

import { displayCalendarWithTasks } from "./calendarManager.js";

document.addEventListener("DOMContentLoaded", () => {
  setupTaskEnvironment();
  setupPrioritiesSubMenu();
  setupProjectEnvironment();
  setupProjectsLabel();
  setupDatesLabel();
  setupSidebarItems();
  setupSidebarToggle();
  displayAllTasks();
});

function setupTaskEnvironment() {
  const addTaskButton = document.getElementById("addTaskButton");
  const tasksContainer = document.getElementById("tasks");

  addTaskButton.style.display = "none";
  addTaskButton.addEventListener("click", handleAddTaskClick);
  tasksContainer.addEventListener("click", handleTaskCompletion);
}

function setupPrioritiesSubMenu() {
  const prioritiesToggle = document.getElementById("togglePriorities");
  const subMenu = document.querySelector(".sub-menu");
  const parentLi = prioritiesToggle.parentElement;
  const tasksLabel = document.querySelector("aside ul li:first-child");

  tasksLabel.addEventListener("click", displayAllTasks);

  prioritiesToggle.addEventListener("click", () => {
    const isSubMenuVisible = subMenu.style.display === "block";
    subMenu.style.display = isSubMenuVisible ? "none" : "block";
    parentLi.classList.toggle("sub-menu-opened", !isSubMenuVisible);
  });

  subMenu.addEventListener("click", (event) => {
    if (event.target.tagName === "LI") {
      const selectedPriority = event.target.textContent;
      filterTasksByPriority(selectedPriority);
      const tasksContainer = document.getElementById("tasks");
      tasksContainer.style.display = "block";
      const projectsContainer = document.getElementById("projectsContainer");
      const calendarContainer = document.getElementById("calendarContainer");
      projectsContainer.style.display = "none";
      calendarContainer.innerHTML = "";
    }
  });
}

function setupProjectEnvironment() {
  const createProjectButton = document.getElementById("createProjectButton");
  const projectsContainer = document.getElementById("projectsContainer");
  createProjectButton.style.display = "none";
  setupCreateProjectButton(createProjectButton, projectsContainer);
}

function setupProjectsLabel() {
  const projectsLabel = document.querySelector("#menuProjects");
  let projectsAreShown = false;
  const projectsContainer = document.getElementById("projectsContainer");
  projectsContainer.classList.add("project-container");
  projectsLabel.addEventListener("click", () => {
    if (!projectsAreShown) {
      const addTaskButton = document.getElementById("addTaskButton");
      if (addTaskButton) {
        addTaskButton.style.display = "none";
      }

      projectsContainer.style.display = "block";
      loadProjects(projectsContainer);

      const tasksContainer = document.getElementById("tasks");
      tasksContainer.style.display = "none";
      projectsAreShown = true;
    }
  });
}

function setupDatesLabel() {
  const datesLabel = document.querySelector("aside ul li:nth-child(4)");
  datesLabel.addEventListener("click", () => {
    const allTasks = loadTasksFromLocalStorage();
    const tasksContainer = document.getElementById("tasks");
    const calendarContainer = document.getElementById("calendarContainer");
    displayCalendarWithTasks(tasksContainer, calendarContainer, allTasks);
  });
}

function setupSidebarItems() {
  const sidebarItems = document.querySelectorAll("aside ul li");
  const createProjectButton = document.getElementById("createProjectButton");
  const projectsContainer = document.getElementById("projectsContainer");
  sidebarItems.forEach((item) => {
    item.addEventListener("click", (event) => {
      const calendarContainer = document.getElementById("calendarContainer");

      switch (event.target.textContent) {
        case "Projects":
          createProjectButton.style.display = "block";
          projectsContainer.style.display = "block";
          calendarContainer.innerHTML = ""; // Clear the calendar container
          break;
        case "Dates":
          createProjectButton.style.display = "none";
          projectsContainer.style.display = "none";

          const allTasks = loadTasksFromLocalStorage();
          const tasksContainer = document.getElementById("tasks");
          displayCalendarWithTasks(tasksContainer, calendarContainer, allTasks);
          break;
        default:
          createProjectButton.style.display = "none";
          projectsContainer.style.display = "none";
          calendarContainer.innerHTML = ""; // Clear the calendar container
          break;
      }
    });
  });
}

function setupSidebarToggle() {
  const toggleSidebarButton = document.getElementById("toggleSidebar");
  const sidebar = document.querySelector("aside");
  toggleSidebarButton.addEventListener("click", () => {
    sidebar.classList.toggle("hidden");
  });
}

----------------------------------------

src/js/taskManager.js:

import {
  saveTasksToLocalStorage,
  loadTasksFromLocalStorage,
} from "./localStorageManager.js";
import {
  TASK_INPUT_PLACEHOLDER,
  PRIORITY_LABEL,
  DATE_LABEL,
  ADD_BUTTON_TEXT,
  CANCEL_BUTTON_TEXT,
  PRIORITIES,
} from "./constants.js";

export function displayAllTasks() {
  const addTaskButton = document.getElementById("addTaskButton");
  addTaskButton.style.display = "flex"; // Shows "add task" button
  const allTasks = loadTasksFromLocalStorage();
  const tasksContainer = document.getElementById("tasks");
  tasksContainer.innerHTML = ""; // Clear the current tasks
  for (const taskData of allTasks) {
    tasksContainer.appendChild(createTaskElement(taskData));
  }
  tasksContainer.style.display = "block";
}

/**
 * Filter tasks by their priority.
 * @param {string} priority - The selected priority.
 */
export function filterTasksByPriority(priority) {
  const allTasks = loadTasksFromLocalStorage();
  const filteredTasks = allTasks.filter((task) => task.priority === priority);
  const tasksContainer = document.getElementById("tasks");
  tasksContainer.innerHTML = ""; // Clear the current tasks
  for (const taskData of filteredTasks) {
    tasksContainer.appendChild(createTaskElement(taskData));
  }
  const addTaskButton = document.getElementById("addTaskButton");
  addTaskButton.style.display = "none"; // Hide the "Add task" button
}


/**
 * Create a DOM element for a task.
 * @param {Object} taskData - The data for the task.
 * @returns {HTMLElement} The task element.
 */
export function createTaskElement(taskData) {
  const task = document.createElement("div");
  task.classList.add("task");
  task.dataset.timestamp = taskData.timestamp;

  const taskText = document.createElement("div");
  taskText.classList.add("task-text");
  taskText.textContent = taskData.text;
  task.appendChild(taskText);

  const taskDetails = document.createElement("div");
  taskDetails.classList.add("task-details");

  const priorityContainer = document.createElement("div");
  priorityContainer.classList.add("custom-container", "priority-container");
  const prioritySpan = document.createElement("span");
  prioritySpan.textContent = taskData.priority;
  priorityContainer.appendChild(prioritySpan);

  if (taskData.date && taskData.date.trim() !== "") {
    // Comprobar si hay fecha y no está vacía
    const dateContainer = document.createElement("div");
    dateContainer.classList.add("custom-container", "date-container");
    const dateSpan = document.createElement("span");
    dateSpan.textContent = taskData.date;
    dateContainer.appendChild(dateSpan);
    taskDetails.appendChild(dateContainer);
  }

  const completeButton = document.createElement("button");
  completeButton.classList.add("complete-button");
  completeButton.textContent = "Complete";
  completeButton.addEventListener("click", function () {
    removeTask(this);
  });

  taskDetails.appendChild(priorityContainer);
  taskDetails.appendChild(completeButton);

  task.appendChild(taskDetails);

  return task;
}

/**
 * Remove a task element from the DOM and update localStorage.
 * @param {HTMLElement} buttonElement - The button element that triggered the removal.
 */
export function removeTask(buttonElement) {
  const taskElement = buttonElement.parentElement.parentElement;
  const taskTimestamp = taskElement.dataset.timestamp;

  taskElement.remove();

  const tasks = loadTasksFromLocalStorage().filter(
    (task) => task.timestamp && task.timestamp.toString() !== taskTimestamp
  );
  saveTasksToLocalStorage(tasks);
}

export function handleAddTaskClick() {
  const addTaskButton = document.getElementById("addTaskButton");
  const createProjectButton = document.getElementById("createProjectButton");

  createProjectButton.style.display = "none";

  const tasksContainer = document.getElementById("tasks");

  addTaskButton.disabled = true;

  // Create new task input form elements
  const taskElement = document.createElement("div");
  taskElement.classList.add("new-task");

  // Text input
  const textInput = document.createElement("input");
  textInput.type = "text";
  textInput.placeholder = TASK_INPUT_PLACEHOLDER;
  textInput.classList.add("task-input");

  const actionContainer = document.createElement("div");
  actionContainer.classList.add("action-container");

  // Priority select
  const priorityContainer = document.createElement("div");
  priorityContainer.classList.add("custom-container", "priority-container");
  const priorityLabel = document.createElement("label");
  priorityLabel.textContent = PRIORITY_LABEL;
  const prioritySelect = document.createElement("select");
  PRIORITIES.forEach((priority) => {
    const option = document.createElement("option");
    option.value = priority;
    option.textContent = priority;
    prioritySelect.appendChild(option);
  });
  priorityContainer.appendChild(priorityLabel);
  priorityContainer.appendChild(prioritySelect);

  // Date input
  const dateContainer = document.createElement("div");
  dateContainer.classList.add("custom-container", "date-container");
  const dateLabel = document.createElement("label");
  dateLabel.textContent = DATE_LABEL;
  const dateInput = document.createElement("input");
  dateInput.type = "date";
  dateContainer.appendChild(dateLabel);
  dateContainer.appendChild(dateInput);

  // Buttons
  const buttonsContainer = document.createElement("div");
  buttonsContainer.classList.add("buttons-container");

  const addButton = document.createElement("button");
  addButton.textContent = ADD_BUTTON_TEXT;
  buttonsContainer.appendChild(addButton);

  const cancelButton = document.createElement("button");
  cancelButton.textContent = CANCEL_BUTTON_TEXT;
  buttonsContainer.appendChild(cancelButton);

  // Add the input elements to the task element
  const inputGroup = document.createElement("div");
  inputGroup.classList.add("input-group");
  inputGroup.appendChild(textInput);
  taskElement.appendChild(inputGroup);

  actionContainer.appendChild(priorityContainer);
  actionContainer.appendChild(dateContainer);
  actionContainer.appendChild(buttonsContainer);

  taskElement.appendChild(actionContainer);

  // Event listeners for adding and cancelling the creation of new tasks
  addButton.addEventListener("click", () => {
    if (textInput.value) {
      const taskTimestamp = Date.now();
      const taskData = {
        timestamp: taskTimestamp,
        text: textInput.value,
        priority: prioritySelect.value,
        date: dateInput.value,
      };
      tasksContainer.appendChild(createTaskElement(taskData));

      // Add task data to local storage
      const tasks = loadTasksFromLocalStorage();
      tasks.push(taskData);
      saveTasksToLocalStorage(tasks);

      taskElement.remove();
      addTaskButton.disabled = false;
    }
  });

  // Handle task cancellation
  cancelButton.addEventListener("click", () => {
    taskElement.remove();
    addTaskButton.disabled = false;
  });

  // Append new task element to tasks container
  tasksContainer.prepend(taskElement);
}

export function handleTaskCompletion(event) {
  if (event.target.classList.contains("complete-button")) {
    removeTask(event.target);
  }
}

----------------------------------------

src/js/projectManager.js:

// projectManager.js

import {
    addProjectToLocalStorage,
    loadProjectsFromLocalStorage,
    removeProjectFromLocalStorage 
} from "./localStorageManager";

// Helper Functions
function createProjectElement(projectName) {
    const projectElement = document.createElement("div");
    projectElement.className = "project-item";

    const projectNameElement = document.createElement("span");
    projectNameElement.textContent = projectName;

    const buttonsContainer = createProjectButtonsContainer(projectName, projectElement);

    projectElement.appendChild(projectNameElement);
    projectElement.appendChild(buttonsContainer);

    return projectElement;
}

function createProjectButtonsContainer(projectName, projectElement) {
    const buttonsContainer = document.createElement("div");
    buttonsContainer.className = "buttons-container";

    const viewButton = document.createElement("button");
    viewButton.textContent = "View";
    viewButton.addEventListener("click", () => {
        // Funcionalidad para ver el proyecto
    });

    const deleteButton = document.createElement("button");
    deleteButton.textContent = "Delete";
    deleteButton.id = `deleteProjectButton_${projectName}`;
    deleteButton.addEventListener("click", () => {
        projectElement.remove();
        removeProjectFromLocalStorage(projectName);
    });

    buttonsContainer.appendChild(viewButton);
    buttonsContainer.appendChild(deleteButton);
    return buttonsContainer;
}

// Main Functions
export function displayProject(projectName, projectsContainer) {
    const projectElement = createProjectElement(projectName);
    projectsContainer.appendChild(projectElement);
}

export function loadProjects(projectsContainer) {
    // Referencia al contenedor de la lista de proyectos
    const projectsListContainer = document.getElementById("projectsList");

    // Limpia cualquier proyecto existente en el contenedor
    projectsListContainer.innerHTML = "";

    const savedProjects = loadProjectsFromLocalStorage();
    savedProjects.forEach(projectName => {
        displayProject(projectName, projectsContainer);
    });
}

export function setupCreateProjectButton(createProjectButton, projectsContainer) {
    createProjectButton.addEventListener("click", () => {
        toggleProjectInput(createProjectButton, projectsContainer);
    });

    // Setting up the event listener for the "Projects" label here to ensure it's only set once.
    const projectsLabel = document.querySelector("#menuProjects");
    projectsLabel.addEventListener("click", () => {
        const addTaskButton = document.getElementById("addTaskButton");
        if (addTaskButton) {
            addTaskButton.style.display = "none";
        }

        projectsContainer.style.display = "flex";
        const tasksContainer = document.getElementById("tasks");
        tasksContainer.style.display = "none";
    });
}

let isInputShown = false;

function toggleProjectInput(createProjectButton, projectsContainer) {

    if (isInputShown) return;

    const projectInput = document.createElement("input");
    projectInput.type = "text";
    projectInput.placeholder = "Project Name";

    const addButton = document.createElement("button");
    addButton.textContent = "Add";

    addButton.addEventListener("click", () => {
        const projectName = projectInput.value.trim();
    
        if (!projectName) {  // Comprobar si el nombre del proyecto está vacío
            alert('Please, enter a project title.');
            return;
        }
    
        // Guardar el proyecto en localStorage
        addProjectToLocalStorage(projectName);
    
        // Mostrar el proyecto en la interfaz
        displayProject(projectName, projectsContainer);
    
        projectInput.value = "";
        inputAndButtonsContainer.remove();
        isInputShown = false;
    });

    const cancelButton = document.createElement("button");
    cancelButton.textContent = "Cancel";

    cancelButton.addEventListener("click", () => {
        inputAndButtonsContainer.remove();
        isInputShown = false;
    });

    const createProjectActions = document.createElement("div");
    createProjectActions.appendChild(addButton);
    createProjectActions.appendChild(cancelButton);

    const inputAndButtonsContainer = document.createElement("div");
    inputAndButtonsContainer.className = "input-and-buttons-container";
    inputAndButtonsContainer.appendChild(projectInput);
    inputAndButtonsContainer.appendChild(createProjectActions);

    createProjectButton.insertAdjacentElement('afterend', inputAndButtonsContainer);
    projectInput.style.display = "block";
    createProjectActions.style.display = "flex";
    projectInput.focus();

    isInputShown = true; // Establecemos isInputShown como true cuando el formulario está visible

}

----------------------------------------

